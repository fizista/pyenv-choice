#!/usr/bin/env bash
#
# Summary: Set or show the global command from the specified python version.
#
# Usage: pyenv cmd-global <command> <version>
#        pyenv cmd-global <command> --unset
#
# Sets the global command version. You can override the global version at
# any time by setting a directory-specific version with `pyenv cmd-local'
# or by setting the `PYENV_VERSION' environment variable.
#
# <version> should be a version tag known to pyenv.
# The special version string `system' will use your default system Python.
# Run `pyenv versions' for a list of available Python versions.
#
# Example: To enable the pipenv from python 3.8.1:
#
# 'pyenv cmd-global pipenv 3.8.1'
#


set -e
[ -n "$PYENV_DEBUG" ] && set -x

cmd_name=$1

# Provide pyenv completions
if [ "$1" = "--complete" ]; then
  echo --unset
  versions=($(pyenv-whence "${2}" 2>/dev/null || true))
  for cmd_version in "${versions[@]}"; do
    echo $cmd_version
  done
  exit
fi

version=$2

PYENV_VERSION_FILE="${PYENV_ROOT}/versions/.cmd-version__${cmd_name}"

if [ -z "$cmd_name" ]; then
  echo "pyenv: You must give the name of the command." 1>&2
  exit 1
fi

if [ "$version" = "--unset" ]; then
  rm -f ${PYENV_VERSION_FILE}
elif [ -n "$version" ]; then
  pyenv-version-file-write "$PYENV_VERSION_FILE" "${version}"
else
  if [ -f "$PYENV_VERSION_FILE" ] && IFS=: versions=($(pyenv-version-file-read "$PYENV_VERSION_FILE")); then
    for version in "${versions[@]}"; do
      echo "$version"
    done
  else
    echo "pyenv: no global command version configured" 1>&2
    exit 1
  fi
fi
